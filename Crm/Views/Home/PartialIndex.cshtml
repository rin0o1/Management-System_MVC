@using Crm_DataUtilities.Repository;
@using Crm_DataUtilities.ViewModel;

@model List<ProductionSituationModel>

@{

    Model.Add(new ProductionSituationModel()
    {
        badProductValue=20,
        machineName="Nome",
        niceProductValue=30,
        totalProduction=50,
        productName="Prod",
        machineStateDescription="Off",
        idStage=6
        
    });
    var a = Model;
    string[] color = new string[] { "#e84685", "red", "#ec802b", "#f3b639" };

}

<style>

   singeMachineData >div{
       border:@color[0];
   }

</style>

<div class="mydiv">

    <div style="background-color:@color[0]" class="labelMachineName1"> <b> @Model[0].machineName </b> </div>
    <div style="background-color:@color[1]" class="labelMachineName2"><b> @Model[1].machineName </b> </div>
    <div style="background-color:@color[2]" class="labelMachineName3"></div>
    <div style="background-color:@color[3]" class="labelMachineName4"></div>

    <div class="productionDataContainer col-md-12">

        @{

            int i = 0;
            foreach (ProductionSituationModel item in Model)
            {
                <style>
                    .machineNameSpan {

                    border-bottom: 1px solid ;
                }
                    .nameContainer > input{
                border:1px dashed @color[i];
                }

                </style>

                <div style="border : 4px solid @color[i];" class=" col-md-12  singleMachineData form-group">
                    <div style="margin-top:2px;" class="row">

                        <b style="" class="col-md-4 machineNameSpan "> @item.machineName  </b>


                        <div class="col-md-2">
                                @switch (item.machineStateDescription)
                                {

                                    case "On":<div class="isWorkingCell" style="text-align:center; padding-top:3px;"> ON</div> break;
                                    case "Off": <div class="isStoppedCell" style="text-align:center; padding-top:3px;"> OFF</div>break;
                                    case "Error": break;
                                    case "Working": break;
                                }

                        </div>

                        @if (item.machineStateDescription != "Off")
                        {
                            <div class="col-md-6">
                                <div class="productNameLabel">
                                    <i> LAVORANDO IL PRODOTTO  @item.productName </i>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="col-md-6">
                                <div class="productNameLabel">
                                    <i> INIZIA UNA NUOVA ATTIVITA'</i>
                                </div>
                            </div>
                        }
                    </div>


                    <div class="col-md-5 noMargin canvasContainer">
                        <canvas style="    margin-top: 10px;" class="myCanvas" id="chart-area1__@item.idStage"> </canvas>
                        <canvas class="myCanvas" id="chart-area__@item.idStage"> </canvas>
                        
                    </div>
                    @if (item.machineStateDescription != "Off")
                    {
                           <div class="dataheader noMargin col-md-offset-8">
                                <div class="col-md-12 noMargin">
                                    <div class="col-md-12">
                                        <i class="userTitleStyle col-md-12 "> OPERATORI  </i>
                                    </div>
                                    <div class="col-md-12  nameContainer">
                                        @if (item.users != null)
                                        {

                                            foreach (var u in item.users)
                                            {
                                                <input style="margin-bottom:10px;" class="col-md-12 " type="text" readonly value="@u.Name @u.Cognome" />
                                            }
                                        }


                                    </div>
                                </div>
                        </div>
                    }
                    else
                    {
                        <button style="margin-top:50px;"> INIZIA </button>
                    }
                </div>

                if (item.machineStateDescription != "Off")
                {
    <script>
                    var config = {
                        type: 'pie',
                        data: {
                            datasets: [{
                                data: [

                                    @item.badProductValue,
                                    @item.niceProductValue
                                ],
                                backgroundColor: [
                                    window.chartColors.red,
                                    window.chartColors.orange,
                                ],
                                label: 'Dataset 1'
                            }],
                            labels: [
                                'Bad',
                                'Good',
                            ]
                        },
                        options: {
                            responsive: true
                        }
                    };

                     var ctx = document.getElementById('chart-area__'+@item.idStage).getContext('2d');
                    window.myPie = new Chart(ctx, config);

                    	var DATA_COUNT = 12;

		        var utils = Samples.utils;

		        utils.srand(110);

		        function getLineColor(ctx) {
			        return utils.color(ctx.datasetIndex);
		        }

		        function alternatePointStyles(ctx) {
			        var index = ctx.dataIndex;
                    return 'rect';
		        }

		        function makeHalfAsOpaque(ctx) {
			        return utils.transparentize(getLineColor(ctx));
		        }

		        function adjustRadiusBasedOnData(ctx) {
			        var v = ctx.dataset.data[ctx.dataIndex];
			        return v < 10 ? 5
				        : v < 25 ? 7
				        : v < 50 ? 9
				        : v < 75 ? 11
				        : 15;
		        }

		        function generateData() {
			        return utils.numbers({
				        count: DATA_COUNT,
				        min: 0,
                        max: 1000,
                        data: ["800"]
			        });
		        }

		        var data = {
			        
			        datasets: [{
				        data: generateData()
			        }]
		        };

		        var options = {
			        legend: false,
			        tooltips: true,
			        elements: {
				        line: {
					        fill: false,
					        backgroundColor: getLineColor,
					        borderColor: getLineColor,
				        },
				        point: {
					        backgroundColor: getLineColor,
					        hoverBackgroundColor: makeHalfAsOpaque,
					        radius: adjustRadiusBasedOnData,
					        pointStyle: alternatePointStyles,
					        hoverRadius: 15,
				        }
			        }
		        };

		        var chart = new Chart('chart-area1__'+@item.idStage, {
			        type: 'line',
			        data: data,
			        options: options
		        });



    </script>}
                
                i++;
            }
        }



    </div>

</div>




